#include <avr/pgmspace.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_DC     9
#define OLED_CS     10
#define OLED_RESET  8
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  &SPI, OLED_DC, OLED_RESET, OLED_CS);


#ifdef ARDUINO_BLUEPILL_F103C8
HardwareSerial Serial(USART3); //for some reason this isn't defined in arduino_core_stm32
#endif
static uint32_t oldtime = millis();
byte SpeedyResponse[100]; //The data buffer for the Serial data. This is longer than needed, just in case
byte ByteNumber;  // pointer to which byte number we are reading currently
byte readCLT; // CLT doesn't need to be updated very ofter so
int CLT;   // to store coolant temp
unsigned int RPM;   //RPM and PW from speeduino
float AFR;
int MAP;
int PSI;
float TEST;
 byte cmdAdata[40] ; 
//#define ALTSTYLE
#define DisplayLogo


#ifdef DisplayLogo
#define imageWidth 128
#define imageHeight 54
const unsigned char bitmap [] PROGMEM=
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xe0, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xe0, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xf0, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xf0, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xf0, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xf0, 0x0f, 0xff, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xf0, 0x0f, 0xff, 0xc6, 0x00, 0x00, 0x00, 0xc1, 0xfc, 0x0f, 0x8f, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xf0, 0x07, 0xc3, 0xc6, 0x00, 0x7e, 0x01, 0x72, 0x06, 0x0f, 0xcf, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xf0, 0x00, 0x03, 0xe3, 0x01, 0x81, 0x02, 0x64, 0x07, 0x0f, 0xef, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xf0, 0x00, 0x03, 0xe1, 0x03, 0x00, 0xc5, 0xe8, 0x23, 0x0f, 0xef, 0x00, 0x03, 0xe0, 
0x00, 0x01, 0xf0, 0x00, 0x01, 0xe1, 0x06, 0x00, 0x4b, 0x91, 0xf9, 0x8f, 0xff, 0x80, 0xff, 0xe0, 
0x00, 0x7f, 0xf0, 0x00, 0x01, 0xf1, 0x06, 0x7c, 0x27, 0x11, 0x69, 0x8f, 0xff, 0x9f, 0xff, 0xc0, 
0x01, 0xff, 0xf0, 0x07, 0xf1, 0xf1, 0xac, 0x4e, 0x26, 0x12, 0xa4, 0xef, 0xff, 0xbf, 0xff, 0x80, 
0x01, 0xe7, 0xf0, 0xfc, 0xf0, 0xf0, 0xdc, 0xad, 0x36, 0x08, 0xfc, 0xaf, 0x7f, 0xff, 0x0f, 0x00, 
0x03, 0xc3, 0xf7, 0xc0, 0xf0, 0xf8, 0xc9, 0x3b, 0x09, 0x0d, 0xe4, 0x9f, 0x7f, 0x86, 0x1e, 0x00, 
0x03, 0xc1, 0xff, 0x80, 0xe0, 0xf8, 0xd9, 0xfe, 0x89, 0x84, 0xfc, 0x9f, 0x3f, 0x82, 0x79, 0xc0, 
0x07, 0x81, 0xff, 0x81, 0xc0, 0x7c, 0x79, 0xae, 0x8c, 0xc5, 0xe4, 0xef, 0x1f, 0x80, 0xf3, 0xe0, 
0x07, 0x80, 0xf7, 0x87, 0x80, 0x7c, 0x19, 0x7b, 0xc2, 0x63, 0x19, 0x8f, 0x1f, 0x81, 0xe3, 0xe0, 
0x07, 0x80, 0x43, 0x8f, 0x00, 0x3e, 0x0d, 0x5d, 0x42, 0x32, 0x79, 0x8e, 0x1f, 0x87, 0xc1, 0xf0, 
0x0f, 0x80, 0x03, 0xde, 0x78, 0x3e, 0x0c, 0xbe, 0x41, 0xb1, 0xfb, 0x0c, 0x3f, 0x8f, 0xe0, 0xf0, 
0x0f, 0x80, 0x03, 0xff, 0xfe, 0x1f, 0x0c, 0x7e, 0x21, 0xd0, 0x47, 0x00, 0x3f, 0x9f, 0xfe, 0xf8, 
0x0f, 0x00, 0x03, 0xf8, 0x0f, 0x1f, 0x86, 0x38, 0x63, 0x88, 0x02, 0x00, 0x37, 0xff, 0xff, 0xf8, 
0x0f, 0x00, 0x03, 0xe0, 0x0e, 0x0f, 0x82, 0x00, 0xef, 0x44, 0x0c, 0x00, 0x17, 0xff, 0xff, 0xfc, 
0x0f, 0x00, 0x07, 0xc0, 0x1e, 0x0f, 0x81, 0x01, 0xbc, 0x83, 0xf0, 0x00, 0x13, 0x00, 0xcf, 0xfc, 
0x0f, 0x80, 0x01, 0xc0, 0x38, 0x07, 0x80, 0xfe, 0x39, 0x00, 0x80, 0x00, 0x10, 0x00, 0x43, 0xfe, 
0x07, 0x80, 0x01, 0xe0, 0xf0, 0x07, 0x80, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xfe, 
0x07, 0x83, 0xf9, 0xe3, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 
0x03, 0xff, 0xff, 0xe7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 
0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x07, 0xf7, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0f, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1e, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1e, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3e, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3c, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3c, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3e, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1e, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1f, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#endif
void setup () {
  Serial.begin(115200);
  
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
    display.clearDisplay();
    display.setCursor(0,0);
    display.setTextSize(3);             // Draw 2X-scale text
    display.setTextColor(SSD1306_WHITE);
    #ifdef DisplayLogo
    display.drawBitmap(
    (display.width()  - imageWidth ) / 2,
    (display.height() - imageHeight) / 2,
    bitmap, imageWidth, imageHeight, 1);
    #endif
    display.display();
    delay(250);
  CLT = 0;
  readCLT = 20;
  delay(250);
  requestData();

}

void loop () {
  #ifdef ALTSTYLE
    requestData();
    processData();
    drawData();
    requestData();              //restart data reading
  }
  #endif
  #ifndef ALTSTYLE
  if (Serial.available () > 0) {  // read bytes from Serial
    SpeedyResponse[ByteNumber ++] = Serial.read();
  }
  if (ByteNumber > (75)) {         // After 75 bytes all the data from speeduino has been received so time to process it (A + 74 databytes)
    oldtime = millis();          // All ok. zero out timeout calculation
    ByteNumber = 0;              // zero out the byte number pointer
    processData();               // do the necessary processing for received data
   // displayData();
    drawData();// only required for debugging
    requestData();               //restart data reading

  }
  if ( (millis() - oldtime) > 500) { // timeout if for some reason reading Serial fails
    oldtime = millis();
    ByteNumber = 0;             // zero out the byte number pointer
    requestData();              //restart data reading
  }
  #endif
}




void requestData() {
#ifdef ALTSTYLE
      Serial.write("A");
        delay(100);
        while (!Serial.available()) { }
        cmdAdata[1] = Serial.read();    // read respnse from speeduino
        if (cmdAdata[1] == 65) //dec 65 == "A"
         {
          if (Serial.available () > 0) {
          SpeedyResponse[ByteNumber ++] = Serial.read();
          }
          if (ByteNumber > (74)) {         // After 75 bytes all the data from speeduino has been received so time to process it (A + 74 databytes)
              oldtime = millis();          // All ok. zero out timeout calculation
              ByteNumber = 0;              // zero out the byte number pointer
          }
         }
#endif
#ifndef ALTSTYLE
Serial.write("A");
#endif   
  
}

//display the needed values in serial monitor for debugging
void displayData() {
  Serial.print ("RPM-"); Serial.print (RPM); Serial.print("\t");
  Serial.print ("CLT-"); Serial.print (CLT); Serial.print("\t");
  Serial.print ("MAP-"); Serial.print (MAP); Serial.print("\t");
  Serial.print ("AFR-"); Serial.print (TEST); Serial.println("\t");

}

void drawData() { //Setup the mock area for drawing this info on the OLED
  display.clearDisplay();
  display.setTextSize(1);             // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,15);
  display.print("AFR-");
  display.setTextSize(2);
  display.setCursor(23,12);
  display.print(TEST, 1);
  display.setCursor(69,12);
  display.print("|");
  display.setCursor(104,15);
  display.setTextSize(1);
  display.print("-PSI");
  display.setTextSize(2);
  display.setCursor(80,12);
  display.print(PSI);
  delay(75);
  display.display();
}
void processData() {  // necessary conversion for the data before sending to CAN BUS

  RPM            = ((SpeedyResponse [16] << 8) | (SpeedyResponse [15])); // RPM low & high (Int) TBD: probaply no need to split high and low bytes etc. this could be all simpler
  AFR           = SpeedyResponse[11];
  MAP           = ((SpeedyResponse [6] << 8) | (SpeedyResponse [5]));
  PSI           = (MAP / 6.895);
  RPM = RPM;
  CLT = SpeedyResponse[8];
  TEST = AFR/10;
  
}
